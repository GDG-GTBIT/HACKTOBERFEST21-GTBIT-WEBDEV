{"version":3,"sources":["../../../source/lib/workbook/dxfCollection.js"],"names":["_isEqual","require","Style","util","DXFItem","style","wb","id","ele","addDXFtoXMLele","DXFCollection","items","thisItem","forEach","item","toObject","push","length","dxfXML","att","addToXMLele","module","exports"],"mappings":";;;;;;AAAA,IAAMA,WAAWC,QAAQ,gBAAR,CAAjB;AACA,IAAMC,QAAQD,QAAQ,UAAR,CAAd;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;IAEMG,O;AAAU;AACZ,qBAAYC,KAAZ,EAAmBC,EAAnB,EAAuB;AAAA;;AACnB,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKE,EAAL;AACH;;;;oCAKWC,G,EAAK;AACb,iBAAKH,KAAL,CAAWI,cAAX,CAA0BD,GAA1B;AACH;;;4BANW;AACR,mBAAO,KAAKD,EAAZ;AACH;;;;;;IAOCG,a;AAAgB;AAClB,2BAAYJ,EAAZ,EAAgB;AAAA;;AACZ,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKK,KAAL,GAAa,EAAb;AACH;;;;4BAEGN,K,EAAO;AACP,gBAAI,EAAEA,iBAAiBH,KAAnB,CAAJ,EAA+B;AAC3BG,wBAAQ,KAAKC,EAAL,CAAQJ,KAAR,CAAcG,KAAd,CAAR;AACH;;AAED,gBAAIO,iBAAJ;AACA,iBAAKD,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzB,oBAAId,SAASc,KAAKT,KAAL,CAAWU,QAAX,EAAT,EAAgCV,MAAMU,QAAN,EAAhC,CAAJ,EAAuD;AACnD,2BAAOH,WAAWE,IAAlB;AACH;AACJ,aAJD;AAKA,gBAAI,CAACF,QAAL,EAAe;AACXA,2BAAW,IAAIR,OAAJ,CAAYC,KAAZ,EAAmB,KAAKC,EAAxB,CAAX;AACA,qBAAKK,KAAL,CAAWK,IAAX,CAAgBJ,QAAhB;AACAA,yBAASL,EAAT,GAAc,KAAKI,KAAL,CAAWM,MAAX,GAAoB,CAAlC;AACH;AACD,mBAAOL,QAAP;AACH;;;oCAMWJ,G,EAAK;AACb,gBAAIU,SAASV,IACRA,GADQ,CACJ,MADI,EAERW,GAFQ,CAEJ,OAFI,EAEK,KAAKF,MAFV,CAAb;;AAIA,iBAAKN,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzBA,qBAAKM,WAAL,CAAiBF,MAAjB;AACH,aAFD;AAGH;;;4BAZY;AACT,mBAAO,KAAKP,KAAL,CAAWM,MAAlB;AACH;;;;;;AAaLI,OAAOC,OAAP,GAAiBZ,aAAjB","file":"dxfCollection.js","sourcesContent":["const _isEqual = require('lodash.isequal');\nconst Style = require('../style');\nconst util = require('util');\n\nclass DXFItem { // ยง18.8.14 dxf (Formatting)\n    constructor(style, wb) {\n        this.wb = wb;\n        this.style = style;\n        this.id;\n    }\n    get dxfId() {\n        return this.id;\n    }\n\n    addToXMLele(ele) {\n        this.style.addDXFtoXMLele(ele);\n    }\n}\n\nclass DXFCollection { // ยง18.8.15 dxfs (Formats)\n    constructor(wb) {\n        this.wb = wb;\n        this.items = [];\n    }\n\n    add(style) {\n        if (!(style instanceof Style)) {\n            style = this.wb.Style(style);\n        }\n\n        let thisItem;\n        this.items.forEach((item) => {\n            if (_isEqual(item.style.toObject(), style.toObject())) {\n                return thisItem = item;\n            }\n        });\n        if (!thisItem) {\n            thisItem = new DXFItem(style, this.wb);\n            this.items.push(thisItem);\n            thisItem.id = this.items.length - 1;\n        }\n        return thisItem;\n    }\n\n    get length() {\n        return this.items.length;\n    }\n\n    addToXMLele(ele) {\n        let dxfXML = ele\n            .ele('dxfs')\n            .att('count', this.length);\n\n        this.items.forEach((item) => {\n            item.addToXMLele(dxfXML);\n        });\n    }\n}\n\nmodule.exports = DXFCollection;"]}