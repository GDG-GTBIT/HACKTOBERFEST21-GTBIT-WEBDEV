{"version":3,"sources":["../../source/lib/utils.js"],"names":["types","require","_bitXOR","a","b","maxLength","length","padString","i","String","substr","response","generateRId","text","possible","charAt","Math","floor","random","_rotateBinary","bin","_getHashForChar","char","hash","charCode","charCodeAt","hashBin","parseInt","toString","charBin","nextHash","getHashOfPassword","str","curHash","curHashBin","charCountBin","saltBin","firstXOR","finalHashBin","finalHash","toUpperCase","slice","getExcelAlpha","colNum","remaining","aCharCode","columnName","mod","fromCharCode","getExcelCellRef","rowNum","getExcelRowCol","numeric","split","filter","el","alpha","row","col","reduce","index","arr","pow","getExcelTS","date","thisDt","Date","setDate","getDate","epoch","legacyLeapDate","diff2","getTime","ts","parseFloat","toFixed","sortCellRefs","aAtt","bAtt","arrayIntersectSafe","Array","ai","bi","result","push","TypeError","getAllCellsInExcelRange","range","cells","cell1props","cell2props","getAllCellsInNumericRange","row1","col1","row2","col2","j","sort","boolToInt","bool","module","exports"],"mappings":"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","file":"utils.js","sourcesContent":["let types = require('./types/index.js');\n\nlet _bitXOR = (a, b) => {\n    let maxLength = a.length > b.length ? a.length : b.length;\n\n    let padString = '';\n    for (let i = 0; i < maxLength; i++) {\n        padString += '0';\n    }\n\n    a = String(padString + a).substr(-maxLength);\n    b = String(padString + b).substr(-maxLength);\n\n    let response = '';\n    for (let i = 0; i < a.length; i++) {\n        response += a[i] === b[i] ? 0 : 1;\n    }\n    return response;\n};\n\nlet generateRId = () => {\n    let text = 'R';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 16; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\nlet _rotateBinary = (bin) => {\n    return bin.substr(1, bin.length - 1) + bin.substr(0, 1);\n};\n\nlet _getHashForChar = (char, hash) => {    \n    hash = hash ? hash : '0000';\n    let charCode = char.charCodeAt(0);\n    let hashBin = parseInt(hash, 16).toString(2);\n    let charBin = parseInt(charCode, 10).toString(2);\n    hashBin = String('000000000000000' + hashBin).substr(-15);\n    charBin = String('000000000000000' + charBin).substr(-15);\n    let nextHash = _bitXOR(hashBin, charBin);\n    nextHash = _rotateBinary(nextHash);\n    nextHash = parseInt(nextHash, 2).toString(16);\n\n    return nextHash;\n};\n\n//  http://www.openoffice.org/sc/excelfileformat.pdf section 4.18.4\nlet getHashOfPassword = (str) => {\n    let curHash = '0000';\n    for (let i = str.length - 1; i >= 0; i--) {\n        curHash = _getHashForChar(str[i], curHash);\n    }\n    let curHashBin = parseInt(curHash, 16).toString(2);\n    let charCountBin = parseInt(str.length, 10).toString(2);\n    let saltBin = parseInt('CE4B', 16).toString(2);\n\n    let firstXOR = _bitXOR(curHashBin, charCountBin);\n    let finalHashBin = _bitXOR(firstXOR, saltBin);\n    let finalHash = String('0000' + parseInt(finalHashBin, 2).toString(16).toUpperCase()).slice(-4);\n\n    return finalHash;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B\n * getExcelAlpha(2);\n */\nlet getExcelAlpha = (colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} rowNum Row number that is to be transalated\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B1\n * getExcelCellRef(1, 2);\n */\nlet getExcelCellRef = (rowNum, colNum) => {\n    let remaining = colNum;\n    let aCharCode = 65;\n    let columnName = '';\n    while (remaining > 0) {\n        let mod = (remaining - 1) % 26;\n        columnName = String.fromCharCode(aCharCode + mod) + columnName;\n        remaining = (remaining - 1 - mod) / 26;\n    } \n    return columnName + rowNum;\n};\n\n/**\n * Translates a Excel cell represenation into row and column numerical equivalents \n * @function getExcelRowCol\n * @param {String} str Excel cell representation\n * @returns {Object} Object keyed with row and col\n * @example\n * // returns {row: 2, col: 3}\n * getExcelRowCol('C2')\n */\nlet getExcelRowCol = (str) => {\n    let numeric = str.split(/\\D/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let alpha = str.split(/\\d/).filter(function (el) {\n        return el !== '';\n    })[0];\n    let row = parseInt(numeric, 10);\n    let col = alpha.toUpperCase().split('').reduce(function (a, b, index, arr) {\n        return a + (b.charCodeAt(0) - 64) * Math.pow(26, arr.length - index - 1);\n    }, 0);\n    return { row: row, col: col };\n};\n\n/**\n * Translates a date into Excel timestamp\n * @function getExcelTS\n * @param {Date} date Date to translate\n * @returns {Number} Excel timestamp\n * @example\n * // returns 29810.958333333332\n * getExcelTS(new Date('08/13/1981'));\n */\nlet getExcelTS = (date) => {\n\n    let thisDt = new Date(date);\n    thisDt.setDate(thisDt.getDate() + 1);\n\n    let epoch = new Date('1900-01-01T00:00:00.0000Z');\n\n    // Handle legacy leap year offset as described in  §18.17.4.1\n    const legacyLeapDate = new Date('1900-02-28T23:59:59.999Z');\n    if (thisDt - legacyLeapDate > 0) {\n        thisDt.setDate(thisDt.getDate() + 1);\n    } \n\n    // Get milliseconds between date sent to function and epoch \n    let diff2 = thisDt.getTime() - epoch.getTime();\n\n    let ts = diff2 / (1000 * 60 * 60 * 24);\n\n    return parseFloat(ts.toFixed(7));\n};\n\nlet sortCellRefs = (a, b) => {\n    let aAtt = getExcelRowCol(a);\n    let bAtt = getExcelRowCol(b);\n    if (aAtt.col === bAtt.col) {\n        return aAtt.row - bAtt.row;\n    } else {\n        return aAtt.col - bAtt.col;\n    }\n};\n\nlet arrayIntersectSafe = (a, b) => {\n\n    if (a instanceof Array && b instanceof Array) {\n        var ai = 0, bi = 0;\n        var result = new Array();\n\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] < b[bi]) {\n                ai++;\n            } else if (a[ai] > b[bi]) {\n                bi++;\n            } else {\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n        }\n        return result;\n    } else {\n        throw new TypeError('Both variables sent to arrayIntersectSafe must be arrays');\n    }\n};\n\nlet getAllCellsInExcelRange = (range) => {\n    var cells = range.split(':');\n    var cell1props = getExcelRowCol(cells[0]);\n    var cell2props = getExcelRowCol(cells[1]);\n    return getAllCellsInNumericRange(cell1props.row, cell1props.col, cell2props.row, cell2props.col);\n};\n\nlet getAllCellsInNumericRange = (row1, col1, row2, col2) => {\n    var response = [];\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n    for (var i = row1; i <= row2; i++) {\n        for (var j = col1; j <= col2; j++) {\n            response.push(getExcelAlpha(j) + i);\n        }\n    }\n    return response.sort(sortCellRefs);\n};\n\nlet boolToInt = (bool) => {\n    if (bool === true) {\n        return 1;\n    }\n    if (bool === false) {\n        return 0;\n    }\n    if (parseInt(bool) === 1) {\n        return 1;\n    }\n    if (parseInt(bool) === 0) {\n        return 0;\n    }\n    throw new TypeError('Value sent to boolToInt must be true, false, 1 or 0');\n};\n\n/*\n * Helper Functions\n */\n\nmodule.exports = {\n    generateRId,\n    getHashOfPassword,\n    getExcelAlpha,\n    getExcelCellRef,\n    getExcelRowCol,\n    getExcelTS,\n    sortCellRefs,\n    arrayIntersectSafe,\n    getAllCellsInExcelRange,\n    getAllCellsInNumericRange,\n    boolToInt\n};"]}