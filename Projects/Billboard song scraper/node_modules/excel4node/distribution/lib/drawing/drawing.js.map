{"version":3,"sources":["../../../source/lib/drawing/drawing.js"],"names":["CTMarker","require","Point","EMU","Drawing","_anchorType","_anchorFrom","_anchorTo","_editAs","_position","type","from","to","undefined","TypeError","editAs","anchorType","anchorFrom","anchorTo","cx","cy","thisCx","thisCy","value","types","indexOf","join","val","obj","Object","col","colOff","row","rowOff","module","exports"],"mappings":";;;;;;AAAA,IAAMA,WAAWC,QAAQ,wBAAR,CAAjB;AACA,IAAMC,QAAQD,QAAQ,qBAAR,CAAd;AACA,IAAME,MAAMF,QAAQ,mBAAR,CAAZ;;IAEMG,O;AACF;;;;;;;;;AASA,uBAAc;AAAA;;AACV,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACA,aAAKC,OAAL,GAAe,IAAf;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACH;;;;;;AA0CD;;;;;;;;;;;;;;;;;+BAiBOC,I,EAAMC,I,EAAMC,E,EAAI;AACnB,gBAAIF,SAAS,eAAb,EAA8B;AAC1B,oBAAIC,SAASE,SAAT,IAAsBD,OAAOC,SAAjC,EAA4C;AACxC,0BAAM,IAAIC,SAAJ,CAAc,kDAAd,CAAN;AACH;AACD,qBAAKC,MAAL,GAAc,SAAd;AACH;AACD,iBAAKC,UAAL,GAAkBN,IAAlB;AACA,iBAAKO,UAAL,GAAkBN,IAAlB;AACA,iBAAKO,QAAL,GAAgBN,EAAhB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;iCAOSO,E,EAAIC,E,EAAI;AACb,iBAAKJ,UAAL,GAAkB,gBAAlB;AACA,gBAAIK,SAAS,IAAIlB,GAAJ,CAAQgB,EAAR,CAAb;AACA,gBAAIG,SAAS,IAAInB,GAAJ,CAAQiB,EAAR,CAAb;AACA,iBAAKX,SAAL,GAAiB,IAAIP,KAAJ,CAAUmB,OAAOE,KAAjB,EAAwBD,OAAOC,KAA/B,CAAjB;AACH;;;4BAlFgB;AACb,mBAAO,KAAKlB,WAAZ;AACH,S;0BACcK,I,EAAM;AACjB,gBAAIc,QAAQ,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,eAApC,CAAZ;AACA,gBAAIA,MAAMC,OAAN,CAAcf,IAAd,IAAsB,CAA1B,EAA6B;AACzB,sBAAM,IAAII,SAAJ,CAAc,+DAA+DU,MAAME,IAAN,CAAW,IAAX,CAA7E,CAAN;AACH;AACD,iBAAKrB,WAAL,GAAmBK,IAAnB;AACH;;;4BAEY;AACT,mBAAO,KAAKF,OAAZ;AACH,S;0BACUmB,G,EAAK;AACZ,gBAAIH,QAAQ,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,CAAZ;AACA,gBAAIA,MAAMC,OAAN,CAAcE,GAAd,IAAqB,CAAzB,EAA4B;AACxB,sBAAM,IAAIb,SAAJ,CAAc,sDAAsDU,MAAME,IAAN,CAAW,IAAX,CAApE,CAAN;AACH;AACD,iBAAKlB,OAAL,GAAemB,GAAf;AACH;;;4BAEgB;AACb,mBAAO,KAAKrB,WAAZ;AACH,S;0BACcsB,G,EAAK;AAChB,gBAAIA,QAAQf,SAAR,IAAqBe,eAAeC,MAAxC,EAAgD;AAC5C,qBAAKvB,WAAL,GAAmB,IAAIN,QAAJ,CAAa4B,IAAIE,GAAJ,GAAU,CAAvB,EAA0BF,IAAIG,MAA9B,EAAsCH,IAAII,GAAJ,GAAU,CAAhD,EAAmDJ,IAAIK,MAAvD,CAAnB;AACH;AACJ;;;4BAEc;AACX,mBAAO,KAAK1B,SAAZ;AACH,S;0BACYqB,G,EAAK;AACd,gBAAIA,QAAQf,SAAR,IAAqBe,eAAeC,MAAxC,EAAgD;AAC5C,qBAAKtB,SAAL,GAAiB,IAAIP,QAAJ,CAAa4B,IAAIE,GAAJ,GAAU,CAAvB,EAA0BF,IAAIG,MAA9B,EAAsCH,IAAII,GAAJ,GAAU,CAAhD,EAAmDJ,IAAIK,MAAvD,CAAjB;AACH;AACJ;;;;;;AA+CLC,OAAOC,OAAP,GAAiB/B,OAAjB","file":"drawing.js","sourcesContent":["const CTMarker = require('../classes/ctMarker.js');\nconst Point = require('../classes/point.js');\nconst EMU = require('../classes/emu.js');\n\nclass Drawing {\n    /**\n     * Element representing an Excel Drawing superclass\n     * @property {String} anchorType Proprty for type of anchor. One of 'absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'\n     * @property {CTMarker} anchorFrom Property for the top left corner position of drawing\n     * @property {CTMarker} anchorTo Property for the bottom left corner position of drawing\n     * @property {String} editAs Property that states how to interact with the Drawing in Excel. One of 'absolute', 'oneCell', 'twoCell'\n     * @property {Point} _position Internal property for position on Excel Worksheet when drawing type is absoluteAnchor\n     * @returns {Drawing} Excel Drawing \n     */\n    constructor() {\n        this._anchorType = null;\n        this._anchorFrom = null;\n        this._anchorTo = null;\n        this._editAs = null;\n        this._position = null;\n    }\n\n    get anchorType() {\n        return this._anchorType;\n    }\n    set anchorType(type) {\n        let types = ['absoluteAnchor', 'oneCellAnchor', 'twoCellAnchor'];\n        if (types.indexOf(type) < 0) {\n            throw new TypeError('Invalid option for anchor type. anchorType must be one of ' + types.join(', '));\n        }\n        this._anchorType = type;\n    }\n\n    get editAs() {\n        return this._editAs;\n    }\n    set editAs(val) {\n        let types = ['absolute', 'oneCell', 'twoCell'];\n        if (types.indexOf(val) < 0) {\n            throw new TypeError('Invalid option for editAs. editAs must be one of ' + types.join(', '));\n        }\n        this._editAs = val;\n    }\n\n    get anchorFrom() {\n        return this._anchorFrom;\n    }\n    set anchorFrom(obj) {\n        if (obj !== undefined && obj instanceof Object) {\n            this._anchorFrom = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n        }\n    }\n\n    get anchorTo() {\n        return this._anchorTo;\n    }\n    set anchorTo(obj) {\n        if (obj !== undefined && obj instanceof Object) {\n            this._anchorTo = new CTMarker(obj.col - 1, obj.colOff, obj.row - 1, obj.rowOff);\n        }\n    }\n\n    /**\n     * @alias Drawing.achor\n     * @desc Sets the postion and anchor properties of the Drawing\n     * @func Drawing.achor\n     * @param {String} type Anchor type of drawing\n     * @param {Object} from Properties for achorFrom property\n     * @param {Number} from.col Left edge of drawing will align with left edge of this column\n     * @param {String} from.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Number} from.row Top edge of drawing will align with top edge of this row\n     * @param {String} from.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Object} to Properties for anchorTo property\n     * @param {Number} to.col Left edge of drawing will align with left edge of this column\n     * @param {String} to.colOff Offset. Drawing will be shifted to the right the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @param {Number} to.row Top edge of drawing will align with top edge of this row\n     * @param {String} to.rowOff Offset. Drawing will be shifted down the specified amount. Float followed by measure [0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi). i.e '10.5mm'\n     * @returns {Drawing} Excel Drawing with attached methods\n     */\n    anchor(type, from, to) {\n        if (type === 'twoCellAnchor') {\n            if (from === undefined || to === undefined) {\n                throw new TypeError('twoCellAnchor requires both from and two markers');\n            }\n            this.editAs = 'oneCell';\n        }\n        this.anchorType = type;\n        this.anchorFrom = from;\n        this.anchorTo = to;\n        return this;\n    }\n\n    /**\n     * @alias Drawing.position\n     * @desc The position of the top left corner of the image on the Worksheet\n     * @func Drawing.position\n     * @param {ST_PositiveUniversalMeasure} cx Postion from left of Worksheet edge\n     * @param {ST_PositiveUniversalMeasure} cy Postion from top of Worksheet edge\n     */\n    position(cx, cy) {\n        this.anchorType = 'absoluteAnchor';\n        let thisCx = new EMU(cx);\n        let thisCy = new EMU(cy);\n        this._position = new Point(thisCx.value, thisCy.value);\n    }\n}\n\nmodule.exports = Drawing;"]}