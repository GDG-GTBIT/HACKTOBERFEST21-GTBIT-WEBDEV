{"version":3,"sources":["../../../source/lib/cell/cell.js"],"names":["utils","require","Comment","Cell","row","col","r","getExcelAlpha","s","t","f","v","index","val","formula","dt","getExcelTS","sId","ele","is","cEle","att","txt","up","comments","module","exports"],"mappings":";;;;;;AAAA,IAAMA,QAAQC,QAAQ,aAAR,CAAd;AACA,IAAMC,UAAUD,QAAQ,oBAAR,CAAhB;;AAEA;;IACME,I;AACF;;;;;;AAMA,kBAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AAAA;;AAClB,aAAKC,CAAL,QAAYN,MAAMO,aAAN,CAAoBF,GAApB,CAAZ,GAAuCD,GAAvC,CADkB,CAC4B;AAC9C,aAAKI,CAAL,GAAS,CAAT,CAFkB,CAEN;AACZ,aAAKC,CAAL,GAAS,IAAT,CAHkB,CAGH;AACf,aAAKC,CAAL,GAAS,IAAT,CAJkB,CAIH;AACf,aAAKC,CAAL,GAAS,IAAT,CALkB,CAKH;AACf,aAAKP,GAAL,GAAWA,GAAX,CANkB,CAMF;AAChB,aAAKC,GAAL,GAAWA,GAAX,CAPkB,CAOF;AACnB;;;;+BAMMO,K,EAAO;AACV,iBAAKH,CAAL,GAAS,GAAT;AACA,iBAAKE,CAAL,GAASC,KAAT;AACA,iBAAKF,CAAL,GAAS,IAAT;AACH;;;+BAEMG,G,EAAK;AACR,iBAAKJ,CAAL,GAAS,GAAT;AACA,iBAAKE,CAAL,GAASE,GAAT;AACA,iBAAKH,CAAL,GAAS,IAAT;AACH;;;gCAEOI,Q,EAAS;AACb,iBAAKL,CAAL,GAAS,IAAT;AACA,iBAAKE,CAAL,GAAS,IAAT;AACA,iBAAKD,CAAL,GAASI,QAAT;AACH;;;6BAEID,G,EAAK;AACN,iBAAKJ,CAAL,GAAS,GAAT;AACA,iBAAKE,CAAL,GAASE,GAAT;AACA,iBAAKH,CAAL,GAAS,IAAT;AACH;;;6BAEIK,E,EAAI;AACL,iBAAKN,CAAL,GAAS,IAAT;AACA,iBAAKE,CAAL,GAASX,MAAMgB,UAAN,CAAiBD,EAAjB,CAAT;AACA,iBAAKL,CAAL,GAAS,IAAT;AACH;;;8BAEKO,G,EAAK;AACP,iBAAKT,CAAL,GAASS,GAAT;AACH;;;oCAEWC,G,EAAK;AACb,gBAAI,KAAKP,CAAL,KAAW,IAAX,IAAmB,KAAKQ,EAAL,KAAY,IAAnC,EAAyC;AACrC;AACH;;AAED,gBAAIC,OAAOF,IAAIA,GAAJ,CAAQ,GAAR,EAAaG,GAAb,CAAiB,GAAjB,EAAsB,KAAKf,CAA3B,EAA8Be,GAA9B,CAAkC,GAAlC,EAAuC,KAAKb,CAA5C,CAAX;AACA,gBAAI,KAAKC,CAAL,KAAW,IAAf,EAAqB;AACjBW,qBAAKC,GAAL,CAAS,GAAT,EAAc,KAAKZ,CAAnB;AACH;AACD,gBAAI,KAAKC,CAAL,KAAW,IAAf,EAAqB;AACjBU,qBAAKF,GAAL,CAAS,GAAT,EAAcI,GAAd,CAAkB,KAAKZ,CAAvB,EAA0Ba,EAA1B;AACH;AACD,gBAAI,KAAKZ,CAAL,KAAW,IAAf,EAAqB;AACjBS,qBAAKF,GAAL,CAAS,GAAT,EAAcI,GAAd,CAAkB,KAAKX,CAAvB,EAA0BY,EAA1B;AACH;AACDH,iBAAKG,EAAL;AACH;;;4BAtDa;AACV,mBAAO,KAAKC,QAAL,CAAc,KAAKlB,CAAnB,CAAP;AACH;;;;;;AAuDLmB,OAAOC,OAAP,GAAiBvB,IAAjB","file":"cell.js","sourcesContent":["const utils = require('../utils.js');\nconst Comment = require('../classes/comment');\n\n// ยง18.3.1.4 c (Cell)\nclass Cell {\n    /**\n     * Create an Excel Cell\n     * @private\n     * @param {Number} row Row of cell. \n     * @param {Number} col Column of cell\n     */\n    constructor(row, col) {\n        this.r = `${utils.getExcelAlpha(col)}${row}`; // 'r' attribute\n        this.s = 0; // 's' attribute refering to style index\n        this.t = null; // 't' attribute stating Cell data type - ยง18.18.11 ST_CellType (Cell Type)\n        this.f = null; // 'f' child element used for formulas\n        this.v = null; // 'v' child element for values\n        this.row = row; // used internally throughout code. Does not go into XML\n        this.col = col; // used internally throughout code. Does not go into XML\n    }\n\n    get comment() {\n        return this.comments[this.r];\n    }\n\n    string(index) {\n        this.t = 's';\n        this.v = index;\n        this.f = null;\n    }\n\n    number(val) {\n        this.t = 'n';\n        this.v = val;\n        this.f = null;\n    }\n\n    formula(formula) {\n        this.t = null;\n        this.v = null;\n        this.f = formula;\n    }\n\n    bool(val) {\n        this.t = 'b';\n        this.v = val;\n        this.f = null;\n    }\n\n    date(dt) {\n        this.t = null;\n        this.v = utils.getExcelTS(dt);\n        this.f = null;\n    }\n\n    style(sId) {\n        this.s = sId;\n    }\n\n    addToXMLele(ele) {\n        if (this.v === null && this.is === null) {\n            return;\n        }\n\n        let cEle = ele.ele('c').att('r', this.r).att('s', this.s);\n        if (this.t !== null) {\n            cEle.att('t', this.t);\n        }\n        if (this.f !== null) {\n            cEle.ele('f').txt(this.f).up();\n        }\n        if (this.v !== null) {\n            cEle.ele('v').txt(this.v).up();\n        }\n        cEle.up();\n    }\n}\n\nmodule.exports = Cell;\n\n"]}