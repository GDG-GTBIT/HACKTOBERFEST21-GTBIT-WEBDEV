{"version":3,"sources":["../../../../source/lib/style/classes/ctColor.js"],"names":["types","require","xmlbuilder","CTColor","color","type","rgb","theme","colorScheme","toLowerCase","undefined","excelColor","getColor","e","TypeError","opts","join","ele","colorEle","att","module","exports"],"mappings":";;;;;;AAAA,IAAMA,QAAQC,QAAQ,sBAAR,CAAd;AACA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;;IAEME,O;AAAU;AACZ;;;;;;;;;AASA,qBAAYC,KAAZ,EAAmB;AAAA;;AACf,aAAKC,IAAL;AACA,aAAKC,GAAL;AACA,aAAKC,KAAL,CAHe,CAGH;;AAEZ,YAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC3B,gBAAIJ,MAAMQ,WAAN,CAAkBJ,MAAMK,WAAN,EAAlB,MAA2CC,SAA/C,EAA0D;AACtD,qBAAKH,KAAL,GAAaH,KAAb;AACA,qBAAKC,IAAL,GAAY,OAAZ;AACH,aAHD,MAGO;AACH,oBAAI;AACA,yBAAKC,GAAL,GAAWN,MAAMW,UAAN,CAAiBC,QAAjB,CAA0BR,KAA1B,CAAX;AACA,yBAAKC,IAAL,GAAY,KAAZ;AACH,iBAHD,CAGE,OAAOQ,CAAP,EAAU;AACR,0BAAM,IAAIC,SAAJ,oDAA+Dd,MAAMW,UAAN,CAAiBI,IAAjB,CAAsBC,IAAtB,CAA2B,IAA3B,CAA/D,0BAAoHhB,MAAMQ,WAAN,CAAkBO,IAAlB,CAAuBC,IAAvB,CAA4B,IAA5B,CAApH,OAAN;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;;;mCAKW;AACP,mBAAO,KAAK,KAAKX,IAAV,CAAP;AACH;;AAED;;;;;;;;;oCAMYY,G,EAAK;AACb,gBAAIC,WAAWD,IAAIA,GAAJ,CAAQ,OAAR,CAAf;AACAC,qBAASC,GAAT,CAAa,KAAKd,IAAlB,EAAwB,KAAK,KAAKA,IAAV,CAAxB;AACH;;;;;;AAGLe,OAAOC,OAAP,GAAiBlB,OAAjB","file":"ctColor.js","sourcesContent":["const types = require('../../types/index.js');\nconst xmlbuilder = require('xmlbuilder');\n\nclass CTColor { //ยง18.8.3 && ยง18.8.19\n    /** \n     * @class CTColor\n     * @desc Excel color representation\n     * @param {String} color Excel Color scheme or Excel Color name or HEX value of Color\n     * @properties {String} type Type of color object. defaults to rgb\n     * @properties {String} rgb ARGB representation of Color\n     * @properties {String} theme Excel Color Scheme\n     * @returns {CTColor}\n     */\n    constructor(color) {\n        this.type;\n        this.rgb;\n        this.theme; //ยง20.1.6.2 clrScheme (Color Scheme) : types.colorSchemes\n\n        if (typeof color === 'string') {\n            if (types.colorScheme[color.toLowerCase()] !== undefined) {\n                this.theme = color;\n                this.type = 'theme';\n            } else {\n                try {\n                    this.rgb = types.excelColor.getColor(color);\n                    this.type = 'rgb';\n                } catch (e) {\n                    throw new TypeError(`Fill color must be an RGB value, Excel color (${types.excelColor.opts.join(', ')}) or Excel theme (${types.colorScheme.opts.join(', ')})`);\n                }\n            }\n        }\n    }\n\n    /** \n     * @func CTColor.toObject\n     * @desc Converts the CTColor instance to a javascript object\n     * @returns {Object}\n     */\n    toObject() {\n        return this[this.type];\n    }\n\n    /**\n     * @alias CTColor.addToXMLele\n     * @desc When generating Workbook output, attaches style to the styles xml file\n     * @func CTColor.addToXMLele\n     * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\n     */\n    addToXMLele(ele) {\n        let colorEle = ele.ele('color');\n        colorEle.att(this.type, this[this.type]);\n    }\n}\n\nmodule.exports = CTColor;"]}